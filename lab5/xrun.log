xrun(64): 21.09-s006: (c) Copyright 1995-2022 Cadence Design Systems, Inc.
TOOL:	xrun(64)	21.09-s006: Started on Jan 07, 2023 at 16:51:55 IST
xrun
	+access+rw
	alu.v
	ctl.v
	sp.v
	sram_tb.v
	sram.v
	top.v
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/a/../../../tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/a/../../../tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/a/../../../tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xrun: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xrun: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/a/../../../tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xrun: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
DEFINE rfTlineLib $(compute:THIS_TOOL_INST_ROOT)/tools/dfII/samples/artist/rfTlineLib
|
xmsim: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,8): cds.lib Invalid path '/tools/cadence/XCELIUM/21.09.006/tools/dfII/samples/artist/rfTlineLib' (cds.lib command ignored).
SOFTINCLUDE $EMXHOME/emxinterface/cds.lib
|
xmsim: *W,DLCVAR (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,14): cds.lib Invalid environment variable ''.
DEFINE Cadence_libs ./Cadence_libs
|
xmsim: *W,DLCPTH (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,16): cds.lib Permission denied '/a/../../../tools/cadence/IC/06.18.230/tools/dfII/local/Cadence_libs' (cds.lib command ignored).
ASSIGN Cadence_libs COMBINE analogLib rfLib rfExamples ahdlLib passiveLib basic US_8ths rfTlineLib
|
xmsim: *W,DLCLIB (/tools/cadence/IC/06.18.230/tools/dfII/local/cds.lib,17): cds.lib Library not defined 'Cadence_libs' (cds.lib command ignored).
Loading snapshot worklib.SRAM_tb:v .................... Done
xcelium> source /tools/cadence/XCELIUM/21.09.006/tools/xcelium/files/xmsimrc
xcelium> run
xmsim: *W,PRUASZ: Unpacked array at "SRAM_tb.SRAM.mem" of 65536 elements exceeds limit of 16384 - not probed
 Use 'probe -create -unpacked 65536 SRAM_tb.SRAM.mem' or 'setenv SHM_UNPACKED_LIMIT 65536' to adjust limit.
xmsim: *W,PRUASZ: Unpacked array at "top.SP.SRAM.mem" of 65536 elements exceeds limit of 16384 - not probed
 Use 'probe -create -unpacked 65536 top.SP.SRAM.mem' or 'setenv SHM_UNPACKED_LIMIT 65536' to adjust limit.
xmsim: *W,DFSET: $dumpfile has already been set to waves.vcd.
            File: ./top.v, line = 18, pos = 9
           Scope: top
            Time: 0 FS + 0

xmsim: *W,PRUASZ: Unpacked array at "SRAM_tb.SRAM.mem" of 65536 elements exceeds limit of 16384 - not probed
 Use 'probe -create -unpacked 65536 SRAM_tb.SRAM.mem' or 'setenv SHM_UNPACKED_LIMIT 65536' to adjust limit.
xmsim: *W,PRUASZ: Unpacked array at "top.SP.SRAM.mem" of 65536 elements exceeds limit of 16384 - not probed
 Use 'probe -create -unpacked 65536 top.SP.SRAM.mem' or 'setenv SHM_UNPACKED_LIMIT 65536' to adjust limit.
time 20: write 00000000 -> mem[0000]
time 30: read mem[0000] -> 00000000
time 40: write 00000001 -> mem[0001]
time 50: read mem[0001] -> 00000001
time 60: write 00000002 -> mem[0002]
time 70: read mem[0002] -> 00000002
time 80: write 00000003 -> mem[0003]
time 90: read mem[0003] -> 00000003
time 100: write 00000004 -> mem[0004]
time 110: read mem[0000] -> 0088000f
time 110: read mem[0004] -> 00000004
time 120: write 00000005 -> mem[0005]
time 130: read mem[0005] -> 00000005
time 140: write 00000006 -> mem[0006]
time 150: read mem[0006] -> 00000006
time 160: write 00000007 -> mem[0007]
time 170: read mem[0001] -> 00c80001
time 170: read mem[0007] -> 00000007
time 180: write 00000008 -> mem[0008]
time 190: read mem[0008] -> 00000008
time 200: write 00000009 -> mem[0009]
time 210: read mem[0009] -> 00000009
time 220: write 0000000a -> mem[000a]
time 230: read mem[0002] -> 01080008
time 230: read mem[000a] -> 0000000a
time 240: write 0000000b -> mem[000b]
time 250: read mem[000b] -> 0000000b
time 260: write 0000000c -> mem[000c]
time 270: read mem[000c] -> 0000000c
time 280: write 0000000d -> mem[000d]
time 290: read mem[0003] -> 241c000b
time 290: read mem[000d] -> 0000000d
time 300: write 0000000e -> mem[000e]
time 310: read mem[000e] -> 0000000e
time 320: write 0000000f -> mem[000f]
time 330: read mem[000f] -> 0000000f
time 340: write 00000010 -> mem[0010]
time 350: read mem[0004] -> 11420000
time 350: read mem[0010] -> 00000010
time 360: write 00000011 -> mem[0011]
time 370: read mem[0011] -> 00000011
time 380: write 00000012 -> mem[0012]
time 390: read mem[000f] -> 00000000
time 390: read mem[0012] -> 00000012
time 400: write 00000013 -> mem[0013]
time 410: read mem[0005] -> 00910001
time 410: read mem[0013] -> 00000013
time 420: write 00000014 -> mem[0014]
time 430: read mem[0014] -> 00000014
time 440: write 00000015 -> mem[0015]
time 450: read mem[0015] -> 00000015
time 460: write 00000016 -> mem[0016]
time 470: read mem[0006] -> 11820000
time 470: read mem[0016] -> 00000016
time 480: write 00000017 -> mem[0017]
time 490: read mem[0017] -> 00000017
time 500: write 00000018 -> mem[0018]
time 510: read mem[0010] -> 00000001
time 510: read mem[0018] -> 00000018
time 520: write 00000019 -> mem[0019]
time 530: read mem[0007] -> 01b50000
time 530: read mem[0019] -> 00000019
time 540: write 0000001a -> mem[001a]
time 550: read mem[001a] -> 0000001a
time 560: write 0000001b -> mem[001b]
time 570: read mem[001b] -> 0000001b
time 580: write 0000001c -> mem[001c]
time 590: read mem[0008] -> 12320000
time 590: read mem[001c] -> 0000001c
time 600: write 0000001d -> mem[001d]
time 610: read mem[001d] -> 0000001d
time 620: write 0000001e -> mem[001e]
time 630: read mem[001e] -> 0000001e
time 640: write 00000001 -> mem[0010]
time 640: write 0000001f -> mem[001f]
time 650: read mem[0009] -> 00d90001
time 650: read mem[001f] -> 0000001f
time 660: write 00000020 -> mem[0020]
time 670: read mem[0020] -> 00000020
time 680: write 00000021 -> mem[0021]
time 690: read mem[0021] -> 00000021
time 700: write 00000022 -> mem[0022]
time 710: read mem[000a] -> 24000003
time 710: read mem[0022] -> 00000022
time 720: write 00000023 -> mem[0023]
time 730: read mem[0023] -> 00000023
time 740: write 00000024 -> mem[0024]
time 750: read mem[0024] -> 00000024
time 760: write 00000025 -> mem[0025]
time 770: read mem[0003] -> 241c000b
time 770: read mem[0025] -> 00000025
time 780: write 00000026 -> mem[0026]
time 790: read mem[0026] -> 00000026
time 800: write 00000027 -> mem[0027]
time 810: read mem[0027] -> 00000027
time 820: write 00000028 -> mem[0028]
time 830: read mem[0004] -> 11420000
time 830: read mem[0028] -> 00000028
time 840: write 00000029 -> mem[0029]
time 850: read mem[0029] -> 00000029
time 860: write 0000002a -> mem[002a]
time 870: read mem[0010] -> 00000001
time 870: read mem[002a] -> 0000002a
time 880: write 0000002b -> mem[002b]
time 890: read mem[0005] -> 00910001
time 890: read mem[002b] -> 0000002b
time 900: write 0000002c -> mem[002c]
time 910: read mem[002c] -> 0000002c
time 920: write 0000002d -> mem[002d]
time 930: read mem[002d] -> 0000002d
time 940: write 0000002e -> mem[002e]
time 950: read mem[0006] -> 11820000
time 950: read mem[002e] -> 0000002e
time 960: write 0000002f -> mem[002f]
time 970: read mem[002f] -> 0000002f
time 980: write 00000030 -> mem[0030]
time 990: read mem[0011] -> 00000002
time 990: read mem[0030] -> 00000030
time 1000: write 00000031 -> mem[0031]
time 1010: read mem[0007] -> 01b50000
time 1010: read mem[0031] -> 00000031
time 1020: write 00000032 -> mem[0032]
time 1030: read mem[0032] -> 00000032
time 1040: write 00000033 -> mem[0033]
time 1050: read mem[0033] -> 00000033
time 1060: write 00000034 -> mem[0034]
time 1070: read mem[0008] -> 12320000
time 1070: read mem[0034] -> 00000034
time 1080: write 00000035 -> mem[0035]
time 1090: read mem[0035] -> 00000035
time 1100: write 00000036 -> mem[0036]
time 1110: read mem[0036] -> 00000036
time 1120: write 00000003 -> mem[0011]
time 1120: write 00000037 -> mem[0037]
time 1130: read mem[0009] -> 00d90001
time 1130: read mem[0037] -> 00000037
time 1140: write 00000038 -> mem[0038]
time 1150: read mem[0038] -> 00000038
time 1160: write 00000039 -> mem[0039]
time 1170: read mem[0039] -> 00000039
time 1180: write 0000003a -> mem[003a]
time 1190: read mem[000a] -> 24000003
time 1190: read mem[003a] -> 0000003a
time 1200: write 0000003b -> mem[003b]
time 1210: read mem[003b] -> 0000003b
time 1220: write 0000003c -> mem[003c]
time 1230: read mem[003c] -> 0000003c
time 1240: write 0000003d -> mem[003d]
time 1250: read mem[0003] -> 241c000b
time 1250: read mem[003d] -> 0000003d
time 1260: write 0000003e -> mem[003e]
time 1270: read mem[003e] -> 0000003e
time 1280: write 0000003f -> mem[003f]
time 1290: read mem[003f] -> 0000003f
time 1300: write 00000040 -> mem[0040]
time 1310: read mem[0004] -> 11420000
time 1310: read mem[0040] -> 00000040
time 1320: write 00000041 -> mem[0041]
time 1330: read mem[0041] -> 00000041
time 1340: write 00000042 -> mem[0042]
time 1350: read mem[0011] -> 00000003
time 1350: read mem[0042] -> 00000042
time 1360: write 00000043 -> mem[0043]
time 1370: read mem[0005] -> 00910001
time 1370: read mem[0043] -> 00000043
time 1380: write 00000044 -> mem[0044]
time 1390: read mem[0044] -> 00000044
time 1400: write 00000045 -> mem[0045]
time 1410: read mem[0045] -> 00000045
time 1420: write 00000046 -> mem[0046]
time 1430: read mem[0006] -> 11820000
time 1430: read mem[0046] -> 00000046
time 1440: write 00000047 -> mem[0047]
time 1450: read mem[0047] -> 00000047
time 1460: write 00000048 -> mem[0048]
time 1470: read mem[0012] -> 00000003
time 1470: read mem[0048] -> 00000048
time 1480: write 00000049 -> mem[0049]
time 1490: read mem[0007] -> 01b50000
time 1490: read mem[0049] -> 00000049
time 1500: write 0000004a -> mem[004a]
time 1510: read mem[004a] -> 0000004a
time 1520: write 0000004b -> mem[004b]
time 1530: read mem[004b] -> 0000004b
time 1540: write 0000004c -> mem[004c]
time 1550: read mem[0008] -> 12320000
time 1550: read mem[004c] -> 0000004c
time 1560: write 0000004d -> mem[004d]
time 1570: read mem[004d] -> 0000004d
time 1580: write 0000004e -> mem[004e]
time 1590: read mem[004e] -> 0000004e
time 1600: write 00000006 -> mem[0012]
time 1600: write 0000004f -> mem[004f]
time 1610: read mem[0009] -> 00d90001
time 1610: read mem[004f] -> 0000004f
time 1620: write 00000050 -> mem[0050]
time 1630: read mem[0050] -> 00000050
time 1640: write 00000051 -> mem[0051]
time 1650: read mem[0051] -> 00000051
time 1660: write 00000052 -> mem[0052]
time 1670: read mem[000a] -> 24000003
time 1670: read mem[0052] -> 00000052
time 1680: write 00000053 -> mem[0053]
time 1690: read mem[0053] -> 00000053
time 1700: write 00000054 -> mem[0054]
time 1710: read mem[0054] -> 00000054
time 1720: write 00000055 -> mem[0055]
time 1730: read mem[0003] -> 241c000b
time 1730: read mem[0055] -> 00000055
time 1740: write 00000056 -> mem[0056]
time 1750: read mem[0056] -> 00000056
time 1760: write 00000057 -> mem[0057]
time 1770: read mem[0057] -> 00000057
time 1780: write 00000058 -> mem[0058]
time 1790: read mem[0004] -> 11420000
time 1790: read mem[0058] -> 00000058
time 1800: write 00000059 -> mem[0059]
time 1810: read mem[0059] -> 00000059
time 1820: write 0000005a -> mem[005a]
time 1830: read mem[0012] -> 00000006
time 1830: read mem[005a] -> 0000005a
time 1840: write 0000005b -> mem[005b]
time 1850: read mem[0005] -> 00910001
time 1850: read mem[005b] -> 0000005b
time 1860: write 0000005c -> mem[005c]
time 1870: read mem[005c] -> 0000005c
time 1880: write 0000005d -> mem[005d]
time 1890: read mem[005d] -> 0000005d
time 1900: write 0000005e -> mem[005e]
time 1910: read mem[0006] -> 11820000
time 1910: read mem[005e] -> 0000005e
time 1920: write 0000005f -> mem[005f]
time 1930: read mem[005f] -> 0000005f
time 1940: write 00000060 -> mem[0060]
time 1950: read mem[0013] -> 00000004
time 1950: read mem[0060] -> 00000060
time 1960: write 00000061 -> mem[0061]
time 1970: read mem[0007] -> 01b50000
time 1970: read mem[0061] -> 00000061
time 1980: write 00000062 -> mem[0062]
time 1990: read mem[0062] -> 00000062
time 2000: write 00000063 -> mem[0063]
time 2010: read mem[0063] -> 00000063
time 2020: write 00000064 -> mem[0064]
time 2030: read mem[0008] -> 12320000
time 2030: read mem[0064] -> 00000064
time 2040: write 00000065 -> mem[0065]
time 2050: read mem[0065] -> 00000065
time 2060: write 00000066 -> mem[0066]
time 2070: read mem[0066] -> 00000066
time 2080: write 0000000a -> mem[0013]
time 2080: write 00000067 -> mem[0067]
time 2090: read mem[0009] -> 00d90001
time 2090: read mem[0067] -> 00000067
time 2100: write 00000068 -> mem[0068]
time 2110: read mem[0068] -> 00000068
time 2120: write 00000069 -> mem[0069]
time 2130: read mem[0069] -> 00000069
time 2140: write 0000006a -> mem[006a]
time 2150: read mem[000a] -> 24000003
time 2150: read mem[006a] -> 0000006a
time 2160: write 0000006b -> mem[006b]
time 2170: read mem[006b] -> 0000006b
time 2180: write 0000006c -> mem[006c]
time 2190: read mem[006c] -> 0000006c
time 2200: write 0000006d -> mem[006d]
time 2210: read mem[0003] -> 241c000b
time 2210: read mem[006d] -> 0000006d
time 2220: write 0000006e -> mem[006e]
time 2230: read mem[006e] -> 0000006e
time 2240: write 0000006f -> mem[006f]
time 2250: read mem[006f] -> 0000006f
time 2260: write 00000070 -> mem[0070]
time 2270: read mem[0004] -> 11420000
time 2270: read mem[0070] -> 00000070
time 2280: write 00000071 -> mem[0071]
time 2290: read mem[0071] -> 00000071
time 2300: write 00000072 -> mem[0072]
time 2310: read mem[0013] -> 0000000a
time 2310: read mem[0072] -> 00000072
time 2320: write 00000073 -> mem[0073]
time 2330: read mem[0005] -> 00910001
time 2330: read mem[0073] -> 00000073
time 2340: write 00000074 -> mem[0074]
time 2350: read mem[0074] -> 00000074
time 2360: write 00000075 -> mem[0075]
time 2370: read mem[0075] -> 00000075
time 2380: write 00000076 -> mem[0076]
time 2390: read mem[0006] -> 11820000
time 2390: read mem[0076] -> 00000076
time 2400: write 00000077 -> mem[0077]
time 2410: read mem[0077] -> 00000077
time 2420: write 00000078 -> mem[0078]
time 2430: read mem[0014] -> 00000005
time 2430: read mem[0078] -> 00000078
time 2440: write 00000079 -> mem[0079]
time 2450: read mem[0007] -> 01b50000
time 2450: read mem[0079] -> 00000079
time 2460: write 0000007a -> mem[007a]
time 2470: read mem[007a] -> 0000007a
time 2480: write 0000007b -> mem[007b]
time 2490: read mem[007b] -> 0000007b
time 2500: write 0000007c -> mem[007c]
time 2510: read mem[0008] -> 12320000
time 2510: read mem[007c] -> 0000007c
time 2520: write 0000007d -> mem[007d]
time 2530: read mem[007d] -> 0000007d
time 2540: write 0000007e -> mem[007e]
time 2550: read mem[007e] -> 0000007e
time 2560: write 0000000f -> mem[0014]
time 2560: write 0000007f -> mem[007f]
time 2570: read mem[0009] -> 00d90001
time 2570: read mem[007f] -> 0000007f
time 2580: write 00000080 -> mem[0080]
time 2590: read mem[0080] -> 00000080
time 2600: write 00000081 -> mem[0081]
time 2610: read mem[0081] -> 00000081
time 2620: write 00000082 -> mem[0082]
time 2630: read mem[000a] -> 24000003
time 2630: read mem[0082] -> 00000082
time 2640: write 00000083 -> mem[0083]
time 2650: read mem[0083] -> 00000083
time 2660: write 00000084 -> mem[0084]
time 2670: read mem[0084] -> 00000084
time 2680: write 00000085 -> mem[0085]
time 2690: read mem[0003] -> 241c000b
time 2690: read mem[0085] -> 00000085
time 2700: write 00000086 -> mem[0086]
time 2710: read mem[0086] -> 00000086
time 2720: write 00000087 -> mem[0087]
time 2730: read mem[0087] -> 00000087
time 2740: write 00000088 -> mem[0088]
time 2750: read mem[0004] -> 11420000
time 2750: read mem[0088] -> 00000088
time 2760: write 00000089 -> mem[0089]
time 2770: read mem[0089] -> 00000089
time 2780: write 0000008a -> mem[008a]
time 2790: read mem[0014] -> 0000000f
time 2790: read mem[008a] -> 0000008a
time 2800: write 0000008b -> mem[008b]
time 2810: read mem[0005] -> 00910001
time 2810: read mem[008b] -> 0000008b
time 2820: write 0000008c -> mem[008c]
time 2830: read mem[008c] -> 0000008c
time 2840: write 0000008d -> mem[008d]
time 2850: read mem[008d] -> 0000008d
time 2860: write 0000008e -> mem[008e]
time 2870: read mem[0006] -> 11820000
time 2870: read mem[008e] -> 0000008e
time 2880: write 0000008f -> mem[008f]
time 2890: read mem[008f] -> 0000008f
time 2900: write 00000090 -> mem[0090]
time 2910: read mem[0015] -> 00000006
time 2910: read mem[0090] -> 00000090
time 2920: write 00000091 -> mem[0091]
time 2930: read mem[0007] -> 01b50000
time 2930: read mem[0091] -> 00000091
time 2940: write 00000092 -> mem[0092]
time 2950: read mem[0092] -> 00000092
time 2960: write 00000093 -> mem[0093]
time 2970: read mem[0093] -> 00000093
time 2980: write 00000094 -> mem[0094]
time 2990: read mem[0008] -> 12320000
time 2990: read mem[0094] -> 00000094
time 3000: write 00000095 -> mem[0095]
time 3010: read mem[0095] -> 00000095
time 3020: write 00000096 -> mem[0096]
time 3030: read mem[0096] -> 00000096
time 3040: write 00000015 -> mem[0015]
time 3040: write 00000097 -> mem[0097]
time 3050: read mem[0009] -> 00d90001
time 3050: read mem[0097] -> 00000097
time 3060: write 00000098 -> mem[0098]
time 3070: read mem[0098] -> 00000098
time 3080: write 00000099 -> mem[0099]
time 3090: read mem[0099] -> 00000099
time 3100: write 0000009a -> mem[009a]
time 3110: read mem[000a] -> 24000003
time 3110: read mem[009a] -> 0000009a
time 3120: write 0000009b -> mem[009b]
time 3130: read mem[009b] -> 0000009b
time 3140: write 0000009c -> mem[009c]
time 3150: read mem[009c] -> 0000009c
time 3160: write 0000009d -> mem[009d]
time 3170: read mem[0003] -> 241c000b
time 3170: read mem[009d] -> 0000009d
time 3180: write 0000009e -> mem[009e]
time 3190: read mem[009e] -> 0000009e
time 3200: write 0000009f -> mem[009f]
time 3210: read mem[009f] -> 0000009f
time 3220: write 000000a0 -> mem[00a0]
time 3230: read mem[0004] -> 11420000
time 3230: read mem[00a0] -> 000000a0
time 3240: write 000000a1 -> mem[00a1]
time 3250: read mem[00a1] -> 000000a1
time 3260: write 000000a2 -> mem[00a2]
time 3270: read mem[0015] -> 00000015
time 3270: read mem[00a2] -> 000000a2
time 3280: write 000000a3 -> mem[00a3]
time 3290: read mem[0005] -> 00910001
time 3290: read mem[00a3] -> 000000a3
time 3300: write 000000a4 -> mem[00a4]
time 3310: read mem[00a4] -> 000000a4
time 3320: write 000000a5 -> mem[00a5]
time 3330: read mem[00a5] -> 000000a5
time 3340: write 000000a6 -> mem[00a6]
time 3350: read mem[0006] -> 11820000
time 3350: read mem[00a6] -> 000000a6
time 3360: write 000000a7 -> mem[00a7]
time 3370: read mem[00a7] -> 000000a7
time 3380: write 000000a8 -> mem[00a8]
time 3390: read mem[0016] -> 00000007
time 3390: read mem[00a8] -> 000000a8
time 3400: write 000000a9 -> mem[00a9]
time 3410: read mem[0007] -> 01b50000
time 3410: read mem[00a9] -> 000000a9
time 3420: write 000000aa -> mem[00aa]
time 3430: read mem[00aa] -> 000000aa
time 3440: write 000000ab -> mem[00ab]
time 3450: read mem[00ab] -> 000000ab
time 3460: write 000000ac -> mem[00ac]
time 3470: read mem[0008] -> 12320000
time 3470: read mem[00ac] -> 000000ac
time 3480: write 000000ad -> mem[00ad]
time 3490: read mem[00ad] -> 000000ad
time 3500: write 000000ae -> mem[00ae]
time 3510: read mem[00ae] -> 000000ae
time 3520: write 0000001c -> mem[0016]
time 3520: write 000000af -> mem[00af]
time 3530: read mem[0009] -> 00d90001
time 3530: read mem[00af] -> 000000af
time 3540: write 000000b0 -> mem[00b0]
time 3550: read mem[00b0] -> 000000b0
time 3560: write 000000b1 -> mem[00b1]
time 3570: read mem[00b1] -> 000000b1
time 3580: write 000000b2 -> mem[00b2]
time 3590: read mem[000a] -> 24000003
time 3590: read mem[00b2] -> 000000b2
time 3600: write 000000b3 -> mem[00b3]
time 3610: read mem[00b3] -> 000000b3
time 3620: write 000000b4 -> mem[00b4]
time 3630: read mem[00b4] -> 000000b4
time 3640: write 000000b5 -> mem[00b5]
time 3650: read mem[0003] -> 241c000b
time 3650: read mem[00b5] -> 000000b5
time 3660: write 000000b6 -> mem[00b6]
time 3670: read mem[00b6] -> 000000b6
time 3680: write 000000b7 -> mem[00b7]
time 3690: read mem[00b7] -> 000000b7
time 3700: write 000000b8 -> mem[00b8]
time 3710: read mem[000b] -> 30000000
time 3710: read mem[00b8] -> 000000b8
time 3720: write 000000b9 -> mem[00b9]
time 3730: read mem[00b9] -> 000000b9
time 3740: write 000000ba -> mem[00ba]
time 3750: read mem[00ba] -> 000000ba
Simulation complete via $finish(1) at time 3760 NS + 1
./ctl.v:294 					    $finish;
xcelium> exit
TOOL:	xrun(64)	21.09-s006: Exiting on Jan 07, 2023 at 16:51:57 IST  (total: 00:00:02)
